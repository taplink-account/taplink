window.$app.defineComponent("chatbots","vue-chatbots-blocks-action-form",{data:function(){return{isFetching:!1,isFetchingPages:!1,isFetchingPageInfo:!1,isUpdating:!1,forms:[],variants:{},property_types:{tag:{title:"Метка",conds:["contain"]}},conds:{contain:"Содержит"},eventTypes:[{type:"goto",title:"Переход на цепочку"},{type:"chain",title:"Подписать на цепочку"},{type:"chain:delete",title:"Завершить цепочку"},{type:"chain:resume",title:"Восстановить цепочку"},{type:"tags:add",title:"Установить метку"},{type:"tags:delete",title:"Удалить метку"}]}},props:["value","index","chatbot"],created:function(){this.value=Vue.observable(this.$clone(this.value))},methods:{save:function(){this.$parent.$parent.updateConditions(this.value),this.$parent.close()},removeItem:function(t){this.value.content.conditions.splice(t,1)},addItem:function(){this.value.content.conditions.push({property:"",cond:"contain",value:""})}},template:'<div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Действие</p> <button class="modal-close is-large" @click="$parent.close()"></button> </header> <section class="modal-card-body modal-card-body-blocks"> <section> <label class="label">Действие</label> <div class="row row-small"> <div class="col-xs-6"> <b-field> <b-select v-model="value.content.event.type" placeholder="-- Выберите событие --" expanded> <option :value="null">-- Выберите событие --</option> <option v-for="t in eventTypes" :value="t.type">{{t.title}}</option> </b-select> </b-field> </div> <div class="col-xs-6"> <b-field v-if="[\'goto\', \'chain\', \'chain:delete\', \'chain:resume\'].indexOf(value.content.event.type) != -1"> <b-select v-model="value.content.event.value" placeholder="-- Выберите цепочку --" expanded> <option :value="null">-- Выберите цепочку --</option> <option v-for="c in chatbot.chains" :value="c.chain_id"><span v-if="c.title">{{c.title}}</span><span v-else>Без имени</span></option> </b-select> </b-field> <input type="text" v-model="value.content.event.value" class="input" v-if="[\'tags:add\', \'tags:delete\'].indexOf(value.content.event.type) != -1"> </div> </div> </section> <section> <div class="has-mb-2" v-if="value.content.conditions.length"> <label class="label">Условия</label> <mx-item v-for="(c, i) in value.content.conditions"> <div class="item-row row"> <div class="col-xs"> <b-select v-model="c.property" placeholder="-- Выберите свойство --" expanded @input="c.value = null"> <option :value="null">-- Выберите событие --</option> <option v-for="(p, pi) in property_types" :value="pi">{{p.title}}</option> </b-select> </div> <div class="col-xs"> <b-select v-model="c.cond" expanded v-if="c.property"> <option v-for="cond in property_types[c.property].conds" :value="cond">{{conds[cond]}}</option> </b-select> <b-select v-model="c.cond" expanded v-else disabled="on"></b-select> </div> <div class="col-xs"><b-input type="text" v-model="c.value"></b-input></div> <div class="col-xs col-shrink"><button type="button" class="button has-text-danger is-text" @click="removeItem(i)"><i class="fa fa-trash-alt"></i></button></div> </div> </mx-item> </div> <button @click="addItem" class="button is-dark"><i class="fas fa-plus has-mr-1"></i> Добавить условие</button> </section> </section> <footer class="modal-card-foot level"> <div class="level-left"></div> <div class="level-right"> <button class="button is-primary" :class="{\'is-loading\': isUpdating}" @click="save">{{\'Сохранить\'|gettext}}</button> </div> </footer> <b-loading :is-full-page="false" :active.sync="isFetching"></b-loading> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-blocks-action",{data:function(){return{state:null,eventTypes:{goto:"Переход на цепочку",chain:"Подписать на цепочку","chain:delete":"Завершить цепочку","tags:add":"Установить метку","tags:delete":"Удалить метку"}}},props:["value","chain_id","id","chatbot","viewDetails"],computed:{conditions:function(){var t=this.value.content.conditions;if(t.length){var e={tag:"Метка"},i={contain:"содержит"};return"Если "+_.map(t,function(t){return'"'+e[t.property]+'" '+i[t.cond]+' "'+t.value+'"'}).join("<br>и ")}}},methods:{save:function(){this.$emit("input",this.value)},updateConditions:function(t){this.value=t,this.$emit("input",this.value)},edit:function(){this.$form("vue-chatbots-blocks-action-form",{value:this.value,chatbot:this.chatbot},this)}},template:'<div> <div class="has-p-1"> <label class="label has-text-centered">Действие</label> <center v-html="conditions" class="has-text-grey"></center> </div> <div class="chatbots-buttons-row"> <div class="chatbots-buttons"> <div class="chatbots-button"> <a class="chatbot-button has-text-primary" @click="edit" :class="{\'is-warning\': !value.content.event.value || !value.content.event.type}"> <span v-if="value.content.event.type">{{eventTypes[value.content.event.type]}}</span> <span v-else>Действие не выбрано</span> <div class="chatbots-buttons-snippet" v-if="viewDetails"> <vue-chatbots-event-details v-model="value.content.event" :chatbot="chatbot"></vue-chatbots-event-details> </div> <div @click.prevent.stop="$emit(\'goto\', value.content.event.value)" class="chatbots-button-goto" :class="{disabled: value.content.event.value == null}" v-if="[\'goto\', \'chain\'].indexOf(value.content.event.type) != -1"></div> </a> </div> </div> </div> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-blocks-picture",{data:function(){return{state:null}},props:["value","chain_id","id","chatbot","viewDetails","viewStatistics","statistics"],computed:{pictureSizeStyle:function(){return"padding-top: "+(this.value.content.picture?this.value.content.picture.height/this.value.content.picture.width*100:50)+"%"}},methods:{goto:function(t){this.$emit("goto",t)},save:function(){this.$emit("input",this.value)},focusMessage:function(){this.state=this.$clone(this.value.content)},blurMessage:function(){_.isEqual(this.state,this.value.content)||this.save(),this.state=null}},template:'<div> <vue-component-pictures v-model="value.content.picture" :button-title="\'Загрузить картинку\'|gettext" button-icon="fa fal fa-cloud-upload" updatable class="chatbot-picture" class-container="picture-container picture-container-upload" :style-container="pictureSizeStyle" @upload="save" @delete="save"></vue-component-pictures> <textarea v-model="value.content.text" class="autoresize-init" @focus="focusMessage" @blur="blurMessage" placeholder="Заголовок"></textarea> <vue-chatbots-buttons v-model="value.content.buttons" :chatbot="chatbot" :viewDetails="viewDetails" :viewStatistics="viewStatistics" :chain_id="chain_id" :statistics="statistics" :id="id" @input="save" @goto="goto"></vue-chatbots-buttons> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-blocks-text",{data:function(){return{state:null}},props:["value","chain_id","id","chatbot","viewDetails","viewStatistics","statistics"],methods:{goto:function(t){this.$emit("goto",t)},focusMessage:function(){this.state=this.$clone(this.value.content)},blurMessage:function(){_.isEqual(this.state,this.value.content)||this.save(),this.state=null},save:function(){this.$emit("input",this.value)}},template:'<div> <textarea v-model="value.content.text" class="autoresize-init" @focus="focusMessage" @blur="blurMessage" placeholder="Текст" style="padding-top: 0"></textarea> <vue-chatbots-buttons v-model="value.content.buttons" :viewDetails="viewDetails" :viewStatistics="viewStatistics" :chatbot="chatbot" :chain_id="chain_id" :statistics="statistics" :id="id" @input="save" @goto="goto"></vue-chatbots-buttons> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-blocks-video",{data:function(){return{state:null}},props:["value","chain_id","id","chatbot","viewDetails","viewStatistics","statistics"],computed:{type:function(){var t=this.value.content.video.link.split(".");return 1<t.length?"video/"+t[t.length-1]:null}},methods:{goto:function(t){this.$emit("goto",t)},save:function(){this.$emit("input",this.value)},focusMessage:function(){this.state=this.$clone(this.value.content)},blurMessage:function(){_.isEqual(this.state,this.value.content)||this.save(),this.state=null}},template:'<div> <transition name="fade"> <div class="video-container" v-if="type"> <video><source :src="value.content.video.link" :type="type"></video> </div> </transition> <input type="text" class="input" v-model="value.content.video.link" @focus="focusMessage" @blur="blurMessage" placeholder="URL"> <textarea v-model="value.content.text" class="autoresize-init" @focus="focusMessage" @blur="blurMessage" placeholder="Заголовок" maxlength="1024"></textarea> <vue-chatbots-buttons v-model="value.content.buttons" :viewDetails="viewDetails" :viewStatistics="viewStatistics" :chatbot="chatbot" :chain_id="chain_id" :statistics="statistics" :id="id" @input="save" @goto="goto"></vue-chatbots-buttons> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-button-events",{data:function(){return{eventTypes:[{type:"chain",title:"Подписать на цепочку",targets:["lead","paid"]},{type:"chain:delete",title:"Завершить цепочку",targets:["lead","paid","click"]},{type:"tags:add",title:"Установить метку",targets:["lead","paid","click"]},{type:"tags:delete",title:"Удалить метку",targets:["lead","paid","click"]}]}},props:["value","chatbot","target","disabled"],methods:{addEvent:function(){this.value.push({type:null,value:null})},removeEvent:function(t){this.value.splice(t,1)}},template:'<div> <div class="has-mb-2" v-if="value.length"> <mx-item v-for="(f, i) in value"> <div class="item-row row"> <div class="col-xs"> <b-select v-model="f.type" placeholder="-- Выберите событие --" expanded @input="f.value = null" :disabled="disabled"> <option :value="null">-- Выберите событие --</option> <option v-for="t in eventTypes" :value="t.type" v-if="t.targets.indexOf(target) != -1">{{t.title}}</option> </b-select> </div> <div class="col-xs"> <b-select v-model="f.value" placeholder="-- Выберите цепочку --" expanded v-if="f.type == \'chain\' || f.type == \'chain:delete\'" :disabled="disabled"> <option :value="null">-- Выберите цепочку --</option> <option v-for="c in chatbot.chains" :value="c.chain_id"><span v-if="c.title">{{c.title}}</span><span v-else>Без имени</span></option> </b-select> <input class="input" v-model="f.value" v-if="f.type == \'tags:add\' || f.type == \'tags:delete\'" :disabled="disabled"></input> </div> <div class="col-xs col-shrink"><button type="button" class="button has-text-danger is-text" @click="removeEvent(i)" :disabled="disabled"><i class="fa fa-trash-alt"></i></button></div> </div> </mx-item> </div> <button @click="addEvent" class="button is-dark" :disabled="disabled"><i class="fas fa-plus has-mr-1"></i> Добавить событие</button> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-button-form",{data:function(){return{isFetching:!1,isFetchingPages:!1,isFetchingPageInfo:!1,isUpdating:!1,forms:[],pagesLazy:null,variants:{}}},props:["value","index","chatbot"],computed:{pages:function(){var e=this;return null==this.pagesLazy&&(this.isFetchingPages=!0,this.$api.get("pages/list").then(function(t){e.pagesLazy=t.response.pages,e.isFetchingPages=!1})),this.pagesLazy}},created:function(){null==this.value.restrict&&(this.value.restrict=!1,this.value.restrict_tags=""),null==this.value.events&&this.$set(this.value,"events",{click:[],lead:[],paid:[]}),"page"==this.value.type&&this.fetchPageInfo(),this.value=Vue.observable(this.$clone(this.value))},methods:{deleteButton:function(){var t=this;this.$confirm("Вы уверены что хотите удалить эту кнопку? Вы не сможете её вернуть!","is-danger").then(function(){t.$parent.$parent.deleteButton(t.index),t.$parent.close()})},fetchPageInfo:function(){var e=this;this.value.value?(this.isFetchingPageInfo=!0,this.$api.get("chatbots/messages/pageinfo",{page_id:this.value.value}).then(function(t){"success"==t.result&&(e.forms=t.response.forms,e.value.restrict=t.response.restrict,e.value.restrict_tags=t.response.restrict_tags,e.value.restrict_fallback=t.response.fallback_page_id),e.isFetchingPageInfo=!1})):(this.forms=[],this.value.restrict=!1,this.value.restrict_tags="")},save:function(){this.$parent.$parent.updateButton(this.index,this.value),this.$parent.close()}},template:'<div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">{{\'Кнопка\'|gettext}}</p> <button class="modal-close is-large" @click="$parent.close()"></button> </header> <section class="modal-card-body modal-card-body-blocks"> <section> <b-field label="Заголовок"> <input type="text" class="input" v-model="value.text"> </b-field> <div class="row row-small"> <div class="col-xs-12 col-sm-4 has-xs-mb-3"> <b-field label="Действие"> <b-select v-model="value.type" expanded @input="value.value = null"> <option value="url">Открыть ссылку</option> <option value="goto">Переход на цепочку</option> <option value="chain">Подписать на цепочку</option> <option value="chain:resume">Восстановить цепочку</option> <option value="page">Открыть страницу</option> <option value="message">Отправить сообщение</option> </b-select> </b-field> </div> <div class="col-xs-12 col-sm"> <b-field label="URL" v-if="value.type == \'url\'"> <input type="text" class="input" v-model="value.value"> </b-field> <b-field label="Переход" v-if="value.type == \'goto\' || value.type == \'chain\' || value.type == \'chain:resume\'" class="has-mb-1"> <b-select v-model="value.value" placeholder="-- Выберите цепочку --" expanded> <option :value="null">-- Выберите цепочку --</option> <option v-for="c in chatbot.chains" :value="c.chain_id"><span v-if="c.title">{{c.title}}</span><span v-else>Без имени</span></option> </b-select> </b-field> <b-field label="Страница" v-if="value.type == \'page\'" class="has-mb-1"> <b-select v-model="value.value" placeholder="Страница не выбрана" expanded :disabled="isFetchingPages" @input="fetchPageInfo"> <option :value="null">Страница не выбрана</option> <option v-for="p in pages" :value="p.page_id" v-if="p.page_id != $account.page_id"><span v-if="p.title">{{p.title}}</span><span v-else>Без имени</span></option> </b-select> </b-field> <div v-if="value.type == \'message\'"> <label class="label">Текст сообщения</label> <textarea v-model="value.value" class="input autoresize-init"></textarea> </div> <div v-if="value.type == \'page\'"> <b-checkbox v-model="value.restrict" :disabled="isFetchingPages || isFetchingPageInfo">Ограничить доступ по метке</b-checkbox> <div class="has-mb-2" v-if="value.restrict"> <input type="text" class="input" v-model="value.restrict_tags" placeholder="Метки" :disabled="isFetchingPages || isFetchingPageInfo"> </div> <div class="has-mb-2" v-if="value.restrict"> <label class="has-text-grey has-pb-1 is-block">Какую страницу открыть если нет доступа</label> <b-select v-model="value.restrict_fallback" expanded :disabled="isFetchingPages"> <option :value="null">Главная страница</option> <option v-for="p in pages" :value="p.page_id" v-if="p.page_id != $account.page_id"><span v-if="p.title">{{p.title}}</span><span v-else>Без имени</span></option> </b-select> </div> <div> <b-checkbox v-model="value.restrict_session" :disabled="isFetchingPages || isFetchingPageInfo">Ограничить доступ только из мессенджера</b-checkbox> <div class="has-mb-2" v-if="value.restrict_session"> <label class="has-text-grey has-pb-1 is-block">Какую страницу открыть если нет доступа</label> <b-select v-model="value.restrict_session_fallback" expanded :disabled="isFetchingPages"> <option :value="null">Главная страница</option> <option v-for="p in pages" :value="p.page_id" v-if="p.page_id != $account.page_id"><span v-if="p.title">{{p.title}}</span><span v-else>Без имени</span></option> </b-select> </div> </div> </div> <div v-else> <b-checkbox v-model="value.remove_buttons">Скрыть все кнопки после нажатия</b-checkbox> </div> </div> </div> </section> <section v-if="value.type == \'page\' && forms.length> 0"> <label class="label">Событие при оформлении заявки</label> <vue-chatbots-button-events v-model="value.events.lead" :chatbot="chatbot" target="lead" :disabled="isFetchingPageInfo"></vue-chatbots-button-events> </section> <section v-if="value.type == \'page\' && forms.length> 0"> <label class="label">Событие при оплате заявки</label> <vue-chatbots-button-events v-model="value.events.paid" :chatbot="chatbot" target="paid" :disabled="isFetchingPageInfo"></vue-chatbots-button-events> </section> <section v-if="value.type == \'page\'"> <label class="label">Событие при открытии страницы</label> <vue-chatbots-button-events v-model="value.events.click" :chatbot="chatbot" target="click"></vue-chatbots-button-events> </section> </section> <footer class="modal-card-foot level"> <div class="level-left"> <a class="button has-text-danger" @click="deleteButton"><i class="fa fa-trash-alt"></i>Удалить</a> </div> <div class="level-right"> <button class="button is-primary" :class="{\'is-loading\': isUpdating}" @click="save">{{\'Сохранить\'|gettext}}</button> </div> </footer> <b-loading :is-full-page="false" :active.sync="isFetching"></b-loading> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-buttons",{props:{value:Object,chain_id:Number,id:Number,chatbot:Object,viewDetails:Boolean,viewStatistics:Boolean,statistics:Object},methods:{detailsText:function(t){var e="Без имени";switch(t.type){case"goto":case"chain":for(var i=this.chatbot.chains,s=Object.keys(i),a=0;a<s.length;a++){var n=i[s[a]];if(n.chain_id==t.value){n.title&&(e=n.title);break}}break;case"message":e="Текст";break;case"page":e="Страница";break;case"url":e=t.value}return'<i class="fas fa-'+{page:"file",chain:"plus",goto:"forward",url:"external-link",message:"font"}[t.type]+' has-mr-1"></i>'+e},getHits:function(t){var e=this.chain_id+":"+this.id;return this.viewStatistics&&this.statistics&&null!=this.statistics.buttons&&null!=this.statistics.buttons[e+":"+t]&&null!=this.statistics.messages[e]?Math.round(100*this.statistics.buttons[e+":"+t]/this.statistics.messages[e])+"%":null},addButton:function(t){var e=parseInt(this.value._).toString(16);this.$set(this.value,e,{text:"",type:"url",value:null,remove_buttons:!1,restrict:!1,restrict_tags:"",restrict_fallback:null,events:{click:[],lead:[],paid:[]}}),null!=t?this.value.$[t].push(e):this.value.$.push([e]),this.value._++,this.$emit("input",this.value)},editButton:function(t){this.$form("vue-chatbots-button-form",{index:t,value:this.value[t],chatbot:this.chatbot},this)},warningButton:function(t){return""==t.text.trim()},updateButton:function(t,e){this.$set(this.value,t,e),this.$emit("input",this.value)},deleteButton:function(t){for(y=this.value.$.length-1;0<=y;y--){var e=this.value.$[y],i=e.indexOf(t);-1!=i&&e.splice(i,1),0==e.length&&this.value.$.splice(y,1)}this.$delete(this.value,t),this.$emit("input",this.value)},updated:_.debounce(function(){this.$emit("input",this.value)},5e3)},template:'<div> <sortable-list v-model="value.$" lockAxis="y" use-drag-handle class="chatbots-buttons" helper-class="is-sorting" @input="updated"> <sortable-item v-for="(x, y) in value.$" :index="y" :key="y" :item="i" class="chatbots-buttons-row"> <sortable-list lockAxis="x" axis="x" v-model="value.$[y]" use-drag-handle helper-class="is-sorting" class="chatbots-buttons-row-container" :class="{\'has-many-buttons\': x.length> 1}" @input="updated"> <sortable-item class="chatbots-button" v-for="(id, ii) in x" :index="ii" :key="ii" :item="id" :data-hits="getHits(id)"> <a class="has-text-primary" @click="editButton(id)" :class="{\'is-warning\': !value[id].value || !value[id].text}"> <div class="chatbots-button-handle" v-sortable-handle></div> <span v-if="value[id].text" class="chatbots-buttons-title">{{value[id].text}}</span><span v-else class="chatbots-buttons-title">Без имени</span> <div class="chatbots-buttons-snippet" v-if="viewDetails"> <vue-chatbots-event-details v-model="value[id]" :chatbot="chatbot"></vue-chatbots-event-details> </div> <div @click.prevent.stop="$emit(\'goto\', value[id].value)" class="chatbots-button-goto" :class="{disabled: value[id].value == null}" v-if="[\'goto\', \'chain\'].indexOf(value[id].type) != -1"></div> </a> </sortable-item> </sortable-list> <div class="chatbots-button-plus" @click.prevent.stop="addButton(y)"></div> <div class="chatbots-button-row-handle" v-sortable-handle></div> </sortable-item> </sortable-list> <div class="chatbots-buttons-row"> <div role="button" class="chatbots-buttons-new" @click="addButton(null)" v-if="viewDetails"><i class=\'fas fa-plus has-mr-1\'></i> Добавить ряд кнопок</div> </div> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-debug-form",{props:["chatbot_id"],computed:{code:function(){return"/debug start "+this.$account.user.session_account_id}},created:function(){this.$io.on("events:chatbot.debug:status",this.debugStatus)},beforeDestroy:function(){this.$io.off("events:chatbot.debug:status",this.debugStatus)},methods:{debugStatus:function(t){t.status&&t.chatbot_id==this.chatbot_id&&this.$parent.close()}},template:'<div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Тестирование бота</p> <button class="modal-close is-large" @click="$parent.close()"></button> </header> <section class="modal-card-body"> <div class="field has-addons"> <div class="control is-expanded"> <input type="input" class="input" v-model="code" disabled="on"></input> </div> <div class="control"> <vue-component-clipboard :text="code" class="button is-default" :show-icon="false"><i class="fal fa-copy has-mr-1"></i>{{\'Скопировать\'|gettext}}</vue-component-clipboard> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-dark" @click="$parent.close()">{{\'Закрыть\'|gettext}}</button> </footer> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-delay-form",{data:function(){return{v:"",t:null,oldValue:null,types:{s:"Секунда",m:"Минута",h:"Час",d:"День"}}},props:["value"],watch:{value:function(t){this.parse(t)},v:function(){this.build()},t:function(){this.build()}},created:function(){this.value||(this.value=""),this.parse(this.value)},methods:{build:function(){this.value=this.t&&this.v&&parseInt(this.v)?parseInt(this.v)+this.t:"",this.oldValue!=this.value&&this.$emit("input",this.value)},parse:function(t){(this.oldValue=t)?(this.t=t.substr(-1,1),this.v=t.substr(0,t.length-1)):(this.v="",this.t=null)}},template:'<div> Отправлять через <div style="display:flex;margin:.5rem 0"> <input type="number" class="input has-text-right" v-model="v" v-if="t" style="width:70px;margin-right:1rem"> <b-select v-model="t" placeholder="Немедленно" expanded style="flex-grow: 1"> <option :value="null">Немедленно</option> <option v-for="(v, k) in types" :value="k">{{v}}</option> </b-select> </div> После предыдущего сообщения </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-event-details",{props:{value:Object,chatbot:Object},methods:{detailsText:function(t){var e="Без имени";switch(t.type){case"goto":case"chain":case"chain:delete":case"chain:resume":for(var i=this.chatbot.chains,s=Object.keys(i),a=0;a<s.length;a++){var n=i[s[a]];if(n.chain_id==t.value){n.title&&(e=n.title);break}}break;case"message":e="Текст";break;case"page":e="Страница";break;case"url":e=t.value;break;case"tags:add":case"tags:delete":e=t.value}return'<i class="fas fa-'+{page:"file",chain:"plus","chain:delete":"minus",goto:"forward","chain:resume":"undo",url:"external-link",message:"font","tags:add":"tag","tags:delete":"tag"}[t.type]+'"></i><dd class="has-ml-1">'+e+"</dd>"}},template:'<span v-html="detailsText(value)" v-if="value.type && value.value"></span>'}),window.$app.defineComponent("chatbots","vue-chatbots-index",{data:function(){return{debug:{active:!1,stared:!1,state:{},scroll:null},isFetching:!1,isAppending:[],isResorting:!1,isUpdatingChain:[],isUpdating:[],chatbot:null,focus:null,chainTitleEditing:null,messageTypes:{text:{title:"Текст"},picture:{title:"Картинка"},video:{title:"Видео"},action:{title:"Действие"}},tags:[],tagsTitles:{},viewChainTag:null,viewDetails:!0,viewStatistics:!1,isAnimatedChain:null,statistics:null}},watch:{viewStatistics:function(t){var e=this;t&&null==this.statistics&&(this.statistics={},this.$api.get("chatbots/statistics/get").then(function(t){e.statistics=t.response.statistics}))}},computed:{scrollContainer:function(){return window.matchMedia("(max-width: 767px)").matches?$mx(".main-block")[0]:document.scrollingElement||document.documentElement}},created:function(){this.$io.on("events:chatbot:refresh",this.refreshChatbot),this.$io.on("events:chatbot.debug:status",this.debugStatus),this.$io.on("events:chatbot.debug:event",this.debugEvent),(window.chatbot=this).fetchData()},beforeDestroy:function(){this.$io.off("events:chatbot:refresh",this.refreshChatbot),this.$io.off("events:chatbot.debug:status",this.debugStatus),this.$io.off("events:chatbot.debug:event",this.debugEvent)},methods:{getMessageHits:function(t,e){return this.viewStatistics&&this.statistics&&null!=this.statistics.messages&&null!=this.statistics.messages[t+":"+e]?this.statistics.messages[t+":"+e]:null},debugEvent:function(e){var i=this;switch(e.event){case"chain.stopped":null!=this.chatbot.chains[e.chain_id]&&_.each(this.chatbot.chains[e.chain_id].messages_index,function(t){i.$delete(i.debug.state,e.chain_id+"_"+t)});break;case"add":e.key&&this.$set(this.debug.state,e.key,"wait");break;case"remove":e.key&&null!=this.debug.state[e.key]&&this.$delete(this.debug.state,e.key),"*"==e.key&&(this.debug.state=[])}},debugStatus:function(t){t.chatbot_id==this.chatbot.chatbot_id&&(this.debug.active=this.debug.started=t.status,t.status||(this.debug.state={}))},debugToggle:function(){this.debug.started?this.debug.active=!this.debug.active:this.$form("vue-chatbots-debug-form",{chatbot_id:this.chatbot.chatbot_id})},debugScroll:function(){var t=Object.keys(this.debug.state),e=this.debug.scroll?t.indexOf(this.debug.scroll):-1;-1!=e&&e<t.length-1?e++:e=0;var i=Object.keys(this.debug.state)[e];scrollIt("#key"+i,"x",this.$refs.chains.$el,300,"linear",function(){scrollIt("#key"+i,"y")}),this.debug.scroll=i},debugForward:function(t,e){"forwarding"!=this.debug.state[t+"_"+e]&&(this.debug.state[t+"_"+e]="forwarding",this.$api.get("chatbots/debug/forward",{chatbot_id:this.chatbot.chatbot_id,chain_id:t,message_id:e}))},refreshChatbot:function(t){this.tagsTitles=t.tags,this.tags=_.keys(t.tags)},optionsForm:function(){this.$form("vue-chatbots-options-form",{chatbot:this.chatbot},this)},goto:function(t){var e=this,i=this.chatbot.chains[t].tag;null!=i&&null!=this.viewChainTag&&this.viewChainTag!=i&&(this.viewChainTag=null),this.$nextTick(function(){scrollIt("#cid"+t,"x",e.$refs.chains.$el,300,"linear",function(){scrollIt(0,"y",null,300),e.isAnimatedChain=t,setTimeout(function(){e.isAnimatedChain=null},1e3)})})},chainBackground:function(t){var e=this.chatbot.chains[t].tag;return null!=e?"background:"+this.tags[e]+"1a":null},chainTitleEdit:function(t){var e=this;this.chainTitleEditing=t,this.$nextTick(function(){e.$refs.chainTitleInput[0].focus()})},chainRepeatableChange:function(t){var e=this.chatbot.chains[t];e.is_repeatable=!e.is_repeatable,this.updateChain(t)},updateChain:function(t){var e=this.chatbot.chains[t];this.$api.post("chatbots/chains/update",{chain_id:t,title:e.title,tag:e.tag,is_repeatable:e.is_repeatable}),this.chainTitleEditing=null},setUpdating:function(t,e,i){var s=t+"."+e;i?this.isUpdating.push(s):this.isUpdating.splice(this.isUpdating.indexOf(s),1)},update:function(e,i,t){var s=this;this.setUpdating(e,i,!0),this.$api.post("chatbots/messages/update",{chain_id:e,id:i,content:t}).then(function(t){s.setUpdating(e,i,!1)}).catch(function(t){s.setUpdating(e,i,!1)})},updateDelay:function(t,e,i){var s=this;t||(this.setUpdating(e,i,!0),this.$api.post("chatbots/messages/delay",{chain_id:e,id:i,delay:this.chatbot.chains[e].messages[i].delay}).then(function(t){s.setUpdating(e,i,!1)}).catch(function(t){s.setUpdating(e,i,!1)}))},deleteMessage:function(i,s){var a=this;this.$confirm("Вы уверены что хотите удалить это сообщение? Вы не сможете её вернуть!","is-danger").then(function(){a.isUpdatingChain.push(i.chain_id);var e=i.messages_index[s];a.$api.get("chatbots/messages/delete",{chain_id:i.chain_id,id:e}).then(function(t){"success"==t.result&&(delete i.messages[e],i.messages_index.splice(s,1)),a.isUpdatingChain.splice(a.isAppending.indexOf(i.chain_id),1)})})},deleteChain:function(i){var s=this;this.$confirm("Вы уверены что хотите удалить эту цепочку? Вы не сможете её вернуть!","is-danger").then(function(){var e=s.chatbot.chains_index[i];s.isUpdatingChain.push(e),s.$api.get("chatbots/chains/delete",{chatbot_id:s.chatbot.chatbot_id,chain_id:e}).then(function(t){"success"==t.result&&(s.$delete(s.chatbot.chains,e),s.chatbot.chains_index.splice(i,1)),s.isUpdatingChain.splice(s.isAppending.indexOf(e),1)}).catch(function(t){s.isUpdatingChain.splice(s.isAppending.indexOf(e),1)})})},cloneChain:function(t){var i=this,s=this.chatbot.chains_index[t];this.isUpdatingChain.push(s),this.$api.get("chatbots/chains/clone",{chatbot_id:this.chatbot.chatbot_id,chain_id:s}).then(function(t){if("success"==t.result){var e=t.response.chain;i.chatbot.chains[e.chain_id]=e,i.chatbot.chains_index.push(e.chain_id)}i.isUpdatingChain.splice(i.isAppending.indexOf(s),1)}).catch(function(t){i.isUpdatingChain.splice(i.isAppending.indexOf(s),1)})},fetchData:function(){var e=this;this.debug.active=!1,this.state={},this.isFetching=!0,this.$api.get("chatbots/get").then(function(t){"success"==t.result&&(e.chatbot=t.response.chatbot,e.debug.started=e.chatbot.debug_started,e.debug.state=e.chatbot.debug_state,e.tagsTitles=e.chatbot.tags,e.tags=_.keys(e.chatbot.tags)),e.isFetching=!1}).catch(function(t){e.isFetching=!1})},startTouch:function(){$mx("html").addClass("is-dragging")},stopTouch:function(){$mx("html").removeClass("is-dragging")},resortedChains:function(){var e=this;this.isResorting=!0,this.$api.get("chatbots/resort",{chatbot_id:this.chatbot_id,idx:this.chatbot.chains_index}).then(function(t){e.isResorting=!1})},resorted:function(e){var i=this;this.isUpdatingChain.push(e.chain_id),this.$api.get("chatbots/chains/resort",{chain_id:e.chain_id,idx:e.messages_index}).then(function(t){i.isUpdatingChain.splice(i.isAppending.indexOf(e.chain_id),1)})},addChains:function(){var i=this;this.$api.get("chatbots/chains/append",{chatbot_id:this.chatbot_id,tag:this.viewChainTag}).then(function(t){if("success"==t.result){var e=t.response.chain;i.chatbot.chains[e.chain_id]=Vue.observable(e),i.chatbot.chains_index.push(e.chain_id)}})},addMessage:function(t){var e=this,i=$mx(t).data(),s=i.type,a=i.cid,n=this.chatbot.chains[a];this.isAppending.push(a),this.$api.get("chatbots/messages/append",{chain_id:a,type:s}).then(function(t){"success"==t.result&&(n.messages[t.response.id]=Vue.observable(t.response.message),n.messages_index.push(t.response.id),e.isAppending.splice(e.isAppending.indexOf(a),1))})}},template:'<div style="display: flex;flex-direction: column" @touchstart="startTouch" @touchend="stopTouch"> <div class="top-panel"> <div class="container"> <div class="is-submenu-toolbar"> <div> <div style="display: flex;align-items: center"> <b-dropdown position="is-bottom-right" v-model="viewChainTag" class="chatbots-dropdown-tags" v-if="chatbot"> <span slot="trigger" style="cursor:pointer"><i class="fa-circle has-ml-1 has-mr-1" :class="{fas: viewChainTag != null, fal: viewChainTag== null}" :style="{color: tags[viewChainTag]}"></i><span class="has-text-grey is-hidden-mobile" v-if="viewChainTag == null">Показывать все</span><span v-else>{{tagsTitles[tags[viewChainTag]]}}</span></span> <b-dropdown-item aria-role="listitem" :value="null" class="has-text-black">Показывать все</b-dropdown-item> <b-dropdown-item aria-role="listitem" :value="t" v-for="(w, t) in tags" :style="{background: w}" v-html="tagsTitles[w]?tagsTitles[w]:\'&nbsp;\'"></b-dropdown-item> </b-dropdown> </div> <div style="display:flex"> <button @click="debugScroll" class="button is-debug-scroll is-hidden-mobile" v-if="debug.active && _.size(debug.state)">{{_.size(debug.state)}}</button> <button @click="debugToggle" class="button is-hidden-mobile" :class="{\'is-black\': debug.active, \'is-light\': !debug.active}" :disabled="!chatbot"><i class="fas fa-triangle fa-rotate-90" :class="{\'has-text-grey-light\': !debug.active}"></i></button> <button @click="viewStatistics = !viewStatistics" :disabled="!chatbot" class="button" :class="{\'is-black\': viewStatistics, \'is-light\': !viewStatistics}"><i class="fa fa-chart-bar"></i></button> <button @click="viewDetails = !viewDetails" :disabled="!chatbot" class="button is-light"><i class="fa" :class="{\'fa-eye\': viewDetails, \'fa-eye-slash\': !viewDetails}"></i></button> <button @click="optionsForm" class="button is-light" :disabled="!chatbot"><i class="fa fa-sliders-h"></i><span class="has-ml-1 is-hidden-mobile">Настройки</span></button> </div> </div> </div> </div> </div> <sortable-list class="chatbots-chains" axis="x" v-model="chatbot.chains_index" use-drag-handle @input="resortedChains" ref="chains" v-if="chatbot && !isFetching" :class="{disabled: isResorting}"> <sortable-item v-for="(cid, j) in chatbot.chains_index" :index="j" :key="j" :item="cid" :id="\'cid\'+cid" :style="chainBackground(cid)" class="col-sm-4 col-md-3 col-lg-2 col-xs-12 chatbots-chain" :class="{\'is-compacted\': !viewDetails, \'has-statistics\': viewStatistics, \'shake animated\': isAnimatedChain== cid}" v-show="viewChainTag == null || viewChainTag== chatbot.chains[cid].tag"> <div class="chatbots-chains-header" @dblclick="chainTitleEdit(j)"> <div v-if="chainTitleEditing != j"> <i class="fas fa-bars fa-rotate-90 is-hidden-mobile" v-sortable-handle></i> <span v-if="chatbot.chains[cid].title">{{chatbot.chains[cid].title}}</span><span v-else>Без имени</span> <b-dropdown position="is-top" class="is-context-menu"> <i class="fa fa-ellipsis-v has-text-grey" slot="trigger"></i> <b-dropdown-item aria-role="listitem" @click="chainRepeatableChange(cid)"><i class="has-mr-1" :class="chatbot.chains[cid].is_repeatable?\'fa fas fa-check-square\':\'fa fa-square\'"></i>Разрешить проходить повторно</b-dropdown-item> <b-dropdown-item aria-role="listitem" @click="cloneChain(j)"><i class="fa fa-clone has-mr-1"></i>Дублировать</b-dropdown-item> <hr aria-role="menuitem" class="dropdown-divider"> <b-dropdown-item aria-role="listitem" class="has-text-danger" @click="deleteChain(j)"><i class="fa fa-trash-alt has-mr-1"></i>Удалить</b-dropdown-item> </b-dropdown> <b-dropdown position="is-bottom-right" v-model="chatbot.chains[cid].tag" @input="updateChain(cid)" class="chatbots-dropdown-tags"> <i class="fa-circle" slot="trigger" :class="{fas: tags[chatbot.chains[cid].tag] != null, fal: !tags[chatbot.chains[cid].tag == null]}" :style="{color: tags[chatbot.chains[cid].tag]}"></i> <b-dropdown-item aria-role="listitem" :value="null" class="has-text-black">Нет метки</b-dropdown-item> <b-dropdown-item aria-role="listitem" :value="t" v-for="(w, t) in tags" :style="{background: w}" v-html="tagsTitles[w]?tagsTitles[w]:\'&nbsp;\'"></b-dropdown-item> </b-dropdown> </div> <input type="text" class="input" v-model="chatbot.chains[cid].title" v-else ref="chainTitleInput" @blur="updateChain(cid)" @keypress="if ($event.keyCode == 13) updateChain(cid)"> </div> <sortable-list class="chatbots-messages" :class="{disabled: isUpdatingChain.indexOf(chatbot.chains[cid].chain_id) != -1}" style="flex-grow:1" lockAxis="y" v-model="chatbot.chains[cid].messages_index" use-drag-handle @input="resorted(chatbot.chains[cid])" :useWindowAsScrollContainer="true" :scrollContainer="scrollContainer" :contentWindow="scrollContainer"> <sortable-item v-for="(id, i) in chatbot.chains[cid].messages_index" :id="\'key\'+cid+\'_\'+id" :index="i" :key="i" :item="id" class="chatbots-message" :class="{\'is-debug-active\': debug.active && debug.state[cid+\'_\'+id]}" :data-type="chatbot.chains[cid].messages[id].type"> <div class="chatbots-message-loader" v-if="isUpdating.indexOf(cid+\'.\'+id) != -1"><div></div></div> <div class="chatbots-message-header" :data-hits="getMessageHits(cid, id)"> <div><span v-if="chatbot.chains[cid].messages[id].delay" class="has-text-grey"><i class="fa fas fa-clock has-text-grey-light"></i>{{chatbot.chains[cid].messages[id].delay}}</span></div> <div v-sortable-handle class="resort-handler"></div> <div> <b-dropdown position="is-top" :close-on-click="false"> <i class="fa fa-ellipsis-v has-text-grey" slot="trigger"></i> <b-dropdown-item aria-role="listitem"> <b-dropdown position="is-top" @active-change="(s) => { updateDelay(s, cid, id) }"> <div slot="trigger"><i class="fa fa-clock has-mr-1"></i>Таймер</div> <b-dropdown-item aria-role="listitem" custom><vue-chatbots-delay-form v-model="chatbot.chains[cid].messages[id].delay"></vue-chatbots-delay-form></b-dropdown-item> </b-dropdown> </b-dropdown-item> <hr aria-role="menuitem" class="dropdown-divider"> <b-dropdown-item aria-role="listitem" class="has-text-danger" @click="deleteMessage(chatbot.chains[cid], i)"><i class="fa fa-trash-alt has-mr-1"></i>Удалить</b-dropdown-item> </b-dropdown> </div> </div> <component v-bind:is="\'vue-chatbots-blocks-\'+chatbot.chains[cid].messages[id].type" v-model="chatbot.chains[cid].messages[id]" :statistics="statistics" :viewDetails="viewDetails" :viewStatistics="viewStatistics" :chain_id="cid" :id="id" :chatbot="chatbot" @input="(v) => { update(cid, id, v.content) }" @goto="goto"></component> <div class="chatbots-debug-forward" v-if="debug.active && debug.state[cid+\'_\'+id]" :class="{\'is-forwarding\': debug.state[cid+\'_\'+id] == \'forwarding\'}" @click="debugForward(cid, id)"></div> </sortable-item> </sortable-list> <center class="has-mt-2 has-mb-2" v-if="!isResorting"> <div :id=\'"chatbotsPlus"+cid\' class="is-hidden"> <a class="tooltip-menu" v-for="(v, i) in messageTypes" onclick="chatbot.addMessage(this)" :data-type="i" :data-cid="cid">{{v.title}}</a> </div> <a class="chatbots-chains-plus button" :class="{\'is-loading\': isAppending.indexOf(cid) != -1}" data-toggle="tooltip" data-placement="top" data-trigger=\'click\' :data-html=\'"#chatbotsPlus"+cid\' data-theme=\'light\'></a> </center> </sortable-item> <div class="col-sm-4 col-md-3 col-lg-2 col-xs-12 chatbots-chain is-chain-panel"> <div class="chatbots-chains-header" style="border-bottom-style: dashed"><a @click="addChains" class="has-text-black"><i class="fal fa-plus has-mr-1"></i>Добавить новую цепочку</a></div> </div> </sortable-list> <b-loading :is-full-page="false" :active.sync="isFetching"></b-loading> </div>'}),window.$app.defineComponent("chatbots","vue-chatbots-options-form",{data:function(){return{isUpdating:!1,isFetching:!1,currentTab:"common",values:{chatbot_id:null,title:"",menu:[],channels:[]},variants:{},action:null,tmpFacebookProfiles:null,channelsOpened:[],currentDriver:null}},props:["chatbot"],mixins:[FormModel],created:function(){this.$io.on("events:chatbot.channel:started",this.started),this.$io.on("events:chatbot.channel:stopped",this.stopped),this.fetchData(!0)},beforeDestroy:function(){this.$io.off("events:chatbot.channel:started",this.started),this.$io.off("events:chatbot.channel:stopped",this.stopped)},computed:{facebookProfiles:function(){var e=this;if(null!=this.tmpFacebookProfiles)return this.tmpFacebookProfiles;this.$api.get("chatbots/options/accounts",{platform_id:2}).then(function(t){if("success"==t.result)return e.tmpFacebookProfiles=t.response.accounts})}},methods:{channelOpenLink:function(t){switch(parseInt(t.platform_id)){case 1:return"tg://resolve?domain="+t.channel_username;case 2:return"https://m.me/"+t.channel_uniq_id}},channelOpenLinkTarget:function(t){switch(t.platform_id){case 2:return"_blank"}return null},toggleShowChannel:function(t){-1==this.channelsOpened.indexOf(t)?this.channelsOpened.push(t):this.channelsOpened.splice(this.channelsOpened.indexOf(t),1)},addChannel:function(t){this.currentDriver=null,this.values.channels.push({channel_id:null,platform_id:t,channel_token:"",channel_uniq_id:null,channel_username:"",is_active:!1,chain_id:this.chatbot.chains_index[0]}),this.channelsOpened.push(this.values.channels.length-1)},start:function(t){this.update({name:"start",index:t})},stop:function(t){this.update({name:"stop",index:t})},currentFacebookProfile:function(t){var e="Профиль не выбран";if(null!=this.tmpFacebookProfiles)for(i=0;i<this.tmpFacebookProfiles.length;i++)if(this.tmpFacebookProfiles[i].id==t.channel_uniq_id){e=this.facebookProfiles[i].name;break}return e},changedStartStop:function(e,i){_.each(this.values.channels,function(t){t.channel_id==e.channel_id&&(t.is_active=i,t.channel_username=null==e.info?"":e.info.username),t.channel_token==e.token&&(t.is_active=i)})},started:function(t){this.changedStartStop(t,!0)},stopped:function(t){this.changedStartStop(t,!1)},deleteChannel:function(t){var e=this;this.$confirm("Вы уверены что хотите удалить этот канал?","is-danger").then(function(){e.values.channels.splice(t,1)})},fetchData:function(t){var e=this;this.isFetching=t,this.$api.get("chatbots/options/get",{},this).then(function(t){e.isFetching=!1,e.variants=t.response.chatbot.variants,e.values=t.response.chatbot.values})},addMenuItem:function(){this.values.menu.push({command:"",title:"",chain:null})},removeMenuItem:function(t){this.values.menu.splice(t,1)},update:function(t){var e=this,i=0<arguments.length&&void 0!==t?t:null;this.isUpdating=!0,this.$api.post("chatbots/options/set",Object.assign(this.values,{action:i}),this).then(function(t){e.isUpdating=!1,"success"==t.result&&(i?e.values=t.response.values:e.$parent.close())}).catch(function(t){e.isUpdating=!1})}},template:'<div class="modal-card modal-card-large"> <header class="modal-card-head"> <p class="modal-card-title">Настройки чатбота</p> <button class="modal-close is-large" @click="$parent.close()"></button> </header> <ul class="nav nav-tabs has-text-left"> <li :class="{active: currentTab== \'common\'}"><a @click="currentTab = \'common\'">{{\'Общие настройки\'|gettext}}</a></li> <li :class="{active: currentTab== \'channels\'}"><a @click="currentTab = \'channels\'">{{\'Каналы\'|gettext}}</a></li> <li :class="{active: currentTab== \'menu\'}"><a @click="currentTab = \'menu\'">{{\'Меню\'|gettext}}</a></li> <li :class="{active: currentTab== \'tags\'}"><a @click="currentTab = \'tags\'">{{\'Метки\'|gettext}}</a></li> </ul> <section class="modal-card-body modal-card-body-blocks"> <section v-if="currentTab == \'common\'"> <div class="row"> <div class="col-xs-12 col-sm-3"> <label class="label">Минимальная задержка</label> <div class="field has-addons"> <div class="control is-expanded"><input type="number" class="input" v-model="values.min_delay"></div> <div class="control"><span class="button is-static">Секунд</span></div> </div> </div> </div> </section> <section v-if="currentTab == \'channels\'"> <div class="form-fields-item-list has-mb-2" v-for="(item, index) in values.channels" v-if="values.channels.length"> <div class="form-fields-item" :class="{in: channelsOpened.indexOf(index) != -1}"> <div class="form-fields-item-title" @click="toggleShowChannel(index)"> <div class="form-fields-item-handle block-handle-link-caret"></div> <a class="has-text-danger is-pulled-right" @click.stop="deleteChannel(index)" :class="{disabled: item.is_active}"><i class="fa fa-trash-alt"></i></a> <span>{{variants.platforms[item.platform_id]}} <span v-if="item.channel_username" class="has-text-grey">— {{item.channel_username}} <a :href="channelOpenLink(item)" :target="channelOpenLinkTarget(item)" @click.stop="" class="has-ml-1 has-text-grey"><i class="fa fa-external-link"></i></a></span></span> </div> <div class="form-fields-item-options" v-if="channelsOpened.indexOf(index) != -1"> <div class="has-mb-2"> <div v-if="item.platform_id == 2"> <b-field label="Профиль"> <div class="field has-addons"> <div class="control is-expanded"> <b-dropdown v-model="item.channel_uniq_id" class="is-fullwidth" aria-role="list" expanded :disabled="item.is_active"> <button class="button is-fullwidth" type="button" style="justify-content: space-between" slot="trigger">{{currentFacebookProfile(item)}}<i class="fal fa-chevron-down has-ml-1"></i></button> <b-dropdown-item :value="p.id" aria-role="listitem" v-for="p in facebookProfiles"> <div class="media"> <img class="media-left avatar image is-24x24" :src="p.picture"></b-icon> <div class="media-content">{{p.name}}</div> </div> </b-dropdown-item> </b-dropdown> </div> <div class="control"> <button class="button has-text-danger" @click="stop(index)" v-if="item.is_active"><i class="fa fa-trash-alt has-mr-1"></i> Отключить</button> <button class="button" @click="start(index)" v-else><i class="fas fa-plug has-mr-1"></i> Подключить</button> </div> </div> </b-field> </div> <div v-if="item.platform_id == 1"> <b-field label="Токен"> <div class="field has-addons"> <div class="control is-expanded"> <input type="text" v-model="item.channel_token" class="input" :disabled="item.is_active"> </div> <div class="control"> <button class="button has-text-danger" @click="stop(index)" v-if="item.is_active"><i class="fa fa-trash-alt has-mr-1"></i> Отключить</button> <button class="button" @click="start(index)" v-else><i class="fas fa-plug has-mr-1"></i> Подключить</button> </div> </div> </b-field> </div> </div> <div class="row"> <div class="col-xs-12 col-sm-4"> <b-field label="Начинать с цепочки"> <b-select v-model="item.chain_id" expanded :disabled="item.is_active"> <option v-for="c in chatbot.chains" :value="c.chain_id"><span v-if="c.title">{{c.title}}</span><span v-else>Без имени</span></option> </b-select> </b-field> </div> </div> </div> </div> </div> <b-dropdown @input="addChannel" v-modal="currentDriver" class="is-fullwidth" aria-role="list" expanded position="is-top-right"> <button class="button is-dark" slot="trigger"><i class="fas fa-plus has-mr-1"></i> Добавить канал</button> <b-dropdown-item aria-role="listitem" value="1">Telegram</b-dropdown-item> <b-dropdown-item aria-role="listitem" value="2">Facebook</b-dropdown-item> </b-dropdown> </section> <section v-if="currentTab == \'menu\'"> <div class="has-mb-2" v-if="values.menu.length"> <mx-item class="is-hidden-mobile mx-item-header"> <div class="item-row row"> <div class="col-xs-6 col-sm-4">Команда</div> <div class="col-xs-6 col-sm-4">Заголовок</div> <div class="col-xs col-shrink has-text-centered"><a class="button has-text-danger is-text" style="visibility: hidden; height: 1px;"><i class="fa fa-trash-alt"></i></a></div> </div> </mx-item> <mx-item v-for="(f, i) in values.menu"> <div class="item-row row"> <div class="col-xs-12 col-sm-4 has-mb-1-mobile"> <input class="input" v-model="f.command" placeholder="Команда"></input> </div> <div class="col-xs-12 col-sm-4 has-mb-1-mobile"> <input class="input" v-model="f.title" placeholder="Заголовок"></input> </div> <div class="col-xs-10 col-sm"> <b-select v-model="f.chain" placeholder="-- Выберите цепочку --" expanded> <option :value="null">-- Выберите цепочку --</option> <option v-for="c in chatbot.chains" :value="c.chain_id"><span v-if="c.title">{{c.title}}</span><span v-else>Без имени</span></option> </b-select> </div> <div class="col-xs-2 col-sm col-sm-shrink has-text-centered"><button type="button" class="button has-text-danger is-fullwidth" @click="removeMenuItem(i)"><i class="fa fa-trash-alt"></i></button></div> </div> </mx-item> </div> <button @click="addMenuItem" class="button is-dark"><i class="fas fa-plus has-mr-1"></i> Добавить пункт меню</button> </section> <section v-if="currentTab == \'tags\'"> <mx-item v-for="(tag, color) in values.tags"> <div class="item-row row"> <div class="col-xs col-shrink"> <input class="input" style="pointer-events: none;width:3rem" :style="{background:color}" disabled="on"></input> </div> <div class="col-xs"> <input class="input" v-model="values.tags[color]" placeholder="Название"></input> </div> </div> </mx-item> </section> </section> <footer class="modal-card-foot level"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary" :class="{\'is-loading\': isUpdating}" @click="update(null)">{{\'Сохранить\'|gettext}}</button> </div> </footer> <b-loading :is-full-page="false" :active.sync="isFetching"></b-loading> </div>'}),window.$app.defineModule("chatbots",[]);
